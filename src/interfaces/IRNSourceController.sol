// SPDX-License-Identifier: UNLICENSED
// slither-disable-next-line solc-version
pragma solidity 0.8.19;

import "@openzeppelin/contracts/access/Ownable2Step.sol";
import "src/interfaces/IRNSource.sol";

/// @dev Provided Random number source is zero
error RNSourceZeroAddress();

/// @dev Current random number request is still active.
error CurrentRequestStillActive();

/// @dev Thrown when trying to invoke `retry` while there is no pending request.
error CannotRetrySuccessfulRequest();

/// @dev Thrown when trying to request a random number while a pending request exists.
error PreviousRequestNotFulfilled();

/// @dev Thrown when trying to deploy a contract with a `maxFailedAttempts` param that is too big.
error MaxFailedAttemptsTooBig();

/// @dev Thrown when trying to deploy a contract with a `maxRequestsDelay` param that is too big.
error MaxRequestDelayTooBig();

/// @dev Thrown when trying to swap randomness source before the current source failed `maxFailedAttempts` times.
error NotEnoughFailedAttempts();

/// @dev Thrown when trying to initialize a randomness source after one was already initialized.
error AlreadyInitialized();

/// @dev Random number fulfillment is unauthorized.
error RandomNumberFulfillmentUnauthorized();

/// @dev A contract that controls the list of random number sources and dispatches random number requests to them.
interface IRNSourceController is IRNSourceConsumer {
    /// @dev Emitted on request retry.
    /// @param failedSource The address of the failed source
    /// @param numberOfFailedAttempts A total number of failed attempts for @param failedSource
    event Retry(IRNSource indexed failedSource, uint256 indexed numberOfFailedAttempts);

    /// @dev Emitted when a new randomness source is set.
    /// @param source The randomness source which was set
    event SourceSet(IRNSource indexed source);

    /// @dev Emitted on a successful randomness request.
    /// @param source The source from which randomness was successfully requested
    event SuccessfulRNRequest(IRNSource indexed source);

    /// @dev Emitted on a failed randomness request.
    /// @param source The source from which randomness was unsuccessfully requested
    /// @param reason The reason why the randomness request, directly propagated from the randomness source
    event FailedRNRequest(IRNSource indexed source, bytes indexed reason);

    /// @dev The current randomness source.
    function source() external view returns (IRNSource source);

    /// @dev Retrieves the number of failed sequential request attempts for the current source.
    function failedSequentialAttempts() external view returns (uint256 numberOfAttempts);

    /// @dev Retrieves the timestamp at which the current source reached `maxFailedAttempts` number of retries.
    function maxFailedAttemptsReachedAt() external view returns (uint256 numberOfAttempts);

    /// @return numberOfAttempts The number of the maximum failed attempts after the source will be removed
    function maxFailedAttempts() external view returns (uint256 numberOfAttempts);

    /// @return timestamp A timestamp for the last data request
    function lastRequestTimestamp() external view returns (uint256 timestamp);

    /// @return isFulfilled Get is last request fulfilled
    function lastRequestFulfilled() external view returns (bool isFulfilled);

    /// @return delay The maximum delay between random number request and its fulfillment
    function maxRequestDelay() external view returns (uint256 delay);

    /// @dev Called by the current random number source to deliver a generated random number.
    /// @param randomNumber A random number generated by the current random number source
    function onRandomNumberFulfilled(uint256 randomNumber) external;

    /// @dev Initializes the controller's underlying randomness source.
    function initSource(IRNSource rnSource) external;

    /// @dev Retries a randomness request. Can only be called when at least `maxRequestDelay` amount of time
    /// passed since `lastRequestTimestamp`.
    function retry() external;

    /// @dev Swaps the controller's underlying randomness source. Can only be called by the owner and after
    /// at least `maxFailedAttempts` retries were invoked.
    /// @param newSource A new random number source to be added to the list of sources
    function swapSource(IRNSource newSource) external;
}
